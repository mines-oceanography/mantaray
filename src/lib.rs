
#[derive(Debug, thiserror::Error)]
pub enum Error {
   #[error("Undefined error")]
   Undefined,
   #[error("Argument passed was out of bounds")]
   ArgumentOutOfBounds
}


trait Height {
    fn calculate(&self, x: f64, y: f64) -> f64;
}

impl WaveRayPath {
   pub fn new(gravity: f64, height_data: Box<dyn Height>) -> Self {
      WaveRayPath { g: gravity, data: height_data }
   }
   pub fn height(&self, x: f64, y: f64) -> f64 {
      self.data.calculate(x, y)
   }
}

struct ConstantHeight {
   h: f64,
}

impl Height for ConstantHeight {
   fn calculate(&self, _x: f64, _y: f64) -> f64 {
       self.h
   }
}


// TODO: create a function height and file (array) height struct and implement Height on them

/// This function takes in the states and returns group velocity:
/// 
/// returns no current, constant h, general equation
/// 
 pub fn group_velocity(k: f64, h: f64) -> Result<f64, Error> {
   if k <= 0.0 {
      return Err(Error::ArgumentOutOfBounds);
   }
   let g = 9.8; // relocate this?
   Ok( (g / 2.0) * ( ((k*h).tanh() + (k*h)/(k*h).cosh().powi(2)) / (k*g*(k*h).tanh()).sqrt() ) )
 }

 /// Takes current state and calculates derivatives
 /// 
 /// returns the odes
 ///  
 pub fn odes(kx: f64, ky: f64, h: f64) -> (f64, f64, f64, f64) {

    let k_mag = (kx*kx + ky*ky).sqrt();
    let k_dir = ky.atan2(kx);

    let cg = group_velocity(k_mag, h).unwrap();
    let cgx = cg * k_dir.cos();
    let cgy = cg * k_dir.sin();

    let dxdt = cgx;
    let dydt = cgy;

    let dkxdt = 0.0;
    let dkydt = 0.0;

    (dxdt, dydt, dkxdt, dkydt)
 }


use ode_solvers::*;

type State = Vector4<f64>;
type Time = f64;

struct WaveRayPath {
   g: f64,
   data: Box<dyn Height>,
}

impl ode_solvers::System<State> for WaveRayPath {
   fn system(&self, x: Time, y: &State, dy: &mut State) {
      let h = self.height(y[0], y[1]);
       let (dxdt, dydt, dkxdt, dkydt) = odes(y[2], y[3], h);
       
       dy[0] = dxdt;
       dy[1] = dydt;
       dy[2] = dkxdt;
       dy[3] = dkydt;
   }
}


#[cfg(test)]
mod test_constant_cg {

   use crate::{group_velocity, odes, ConstantHeight};

   // testing group velocity function against values generated by wolfram alpha
    #[test]
    fn test_group_velocity() {
      let results = [
         (1.0, 1.565247584249853),
         (3.0, 0.9036961141150639),
         (5.0, 0.7),
         (10.0, 0.4949747468305833)
      ];
      for (k, ans) in results {
         assert!((group_velocity(k, 1000.0).unwrap() - ans).abs() < 1.0e-4, "k: {}, ans: {}", k, ans);
      } 
    }

    #[test]
    fn test_negative_k() {
         assert!(group_velocity(-1.0, 1000.0).is_err());
         assert!(group_velocity(-12.0, 1000.0).is_err())
      }

   // testing ode on simple cases worked out by hand
   #[test]
   fn test_odes() {
      let results = [
         // (kx, ky, dxdt, dydt)
         (1.0, 0.0, 1.565247584249853, 0.0),
         (0.0, 1.0, 0.0, 1.565247584249853),
         (-1.0, 0.0, -1.565247584249853, 0.0),
         (0.0, -1.0, 0.0, -1.565247584249853),
         // (0.0, 0.0, 0.0, 0.0) // this would cause panic
      ];
      for (kx, ky, ans_dxdt, ans_dydt) in results {
         let (dxdt, dydt, _, _) = odes(kx, ky, 1000.0);
         assert!(
            (ans_dxdt - dxdt).abs() < 1.0e-4
            && (ans_dydt -dydt).abs() < 1.0e-4,
            "ans_dxdt: {}, ans_dydt: {}, dxdt: {}, dydt: {}, kx: {}, ky: {}",
            ans_dxdt, ans_dydt, dxdt, dydt, kx, ky
         );
      }
   }

   use crate::{State, WaveRayPath};
   use ode_solvers::*;

   #[test]
   #[should_panic]
   fn test_zero_k() {
      let system = WaveRayPath::new(9.8, Box::new(ConstantHeight { h: 1000.0 }));
      let y0 = State::new(0.0, 0.0, 0.0, 0.0);

      let t0 = 0.0;
      let tf = 10.0;
      let step_size = 1.0;

      let mut stepper = Rk4::new(system, t0, y0, tf, step_size);
      let res = stepper.integrate();
   }

   #[test]
   // Testing the ode_solvers Rk4 function only in the kx or ky direction
   fn test_axis() {
      // answers should be the square root of gravity
      let check_axis = [
         (0.0, 1.0, 0.0, (9.8_f64).sqrt()/2.0),
         (1.0, 0.0, (9.8_f64).sqrt()/2.0, 0.0),
         (0.0, -1.0, 0.0, -(9.8_f64).sqrt()/2.0),
         (-1.0, 0.0, -(9.8_f64).sqrt()/2.0, 0.0)
      ];
      for (kx, ky, xf, yf) in check_axis {
         let system = WaveRayPath::new(9.8, Box::new(ConstantHeight { h: 1000.0 }));
         let y0 = State::new(0.0, 0.0, kx, ky);
         let mut stepper = Rk4::new(system, 0.0, y0, 1.0, 1.0);
         if stepper.integrate().is_ok() {
            let last_state = stepper.y_out().last().unwrap();
            assert!(
               (last_state.x - xf).abs() < 3.0*f64::EPSILON // super close, so I will take the values it gives as accurate
               && (last_state.y - yf).abs() < 3.0*f64::EPSILON,
               "expected xf: {}, actual: {} \nexpected yf: {}, actual: {}",
               xf, last_state.x, yf, last_state.y
            );
         } else {
            panic!("Error during ode_solvers integration")
         }
      }
   }

}