/// This function takes in the states and returns group velocity:
/// 
/// returns simple case for now
/// 
/// FIXME: should return an Err result? right now just panics
 pub fn group_velocity(k: f64) -> f64 {
   if k == 0.0 {
      panic!("k can not equal 0");
   }
    let g = 9.8; // relocate this?
    (g/k).sqrt()
 }

 /// Takes current state and calculates derivatives
 /// 
 /// returns the odes
 ///  
 pub fn odes(kx: f64, ky: f64) -> (f64, f64, f64, f64) {

    let k_mag = (kx*kx + ky*ky).sqrt();
    let k_dir = ky.atan2(kx);

    let cg = group_velocity(k_mag);
    let cgx = cg * k_dir.cos();
    let cgy = cg * k_dir.sin();

    let dxdt = cgx;
    let dydt = cgy;

    let dkxdt = 0.0;
    let dkydt = 0.0;

    (dxdt, dydt, dkxdt, dkydt)
 }

#[cfg(test)]
mod test_functions {
    use crate::{group_velocity, odes};

   // testing group velocity function against values generated by wolfram alpha
    #[test]
    fn test_group_velocity() {
      let results = [
         (1.0, 3.1305),
         (3.0, 1.80739),
         (5.0, 1.4),
         (10.0, 0.989949)
      ];
      for (k, ans) in results {
         assert!((group_velocity(k) - ans).abs() < 1.0e-4, "k: {}, ans: {}", k, ans);
      } 
    }

   // testing ode on simple cases worked out by hand
   #[test]
   fn test_odes() {
      let results = [
         // (kx, ky, dxdt, dydt)
         (1.0, 0.0, 3.13050, 0.0),
         (0.0, 1.0, 0.0, 3.13050),
         (-1.0, 0.0, -3.13050, 0.0),
         (0.0, -1.0, 0.0, -3.13050),
         // (0.0, 0.0, 0.0, 0.0) // this would cause panic
      ];
      for (kx, ky, ans_dxdt, ans_dydt) in results {
         let (dxdt, dydt, _, _) = odes(kx, ky);
         assert!(
            (ans_dxdt - dxdt).abs() < 1.0e-4
            && (ans_dydt -dydt).abs() < 1.0e-4,
            "ans_dxdt: {}, ans_dydt: {}, dxdt: {}, dydt: {}, kx: {}, ky: {}",
            ans_dxdt, ans_dydt, dxdt, dydt, kx, ky
         );
      }
   }

}


use ode_solvers::*;
use ode_solvers::rk4::*;

type State = Vector4<f64>;
type Time = f64;

struct WaveRayPath {
   g: f64,
}

impl ode_solvers::System<State> for WaveRayPath {
   fn system(&self, x: Time, y: &State, dy: &mut State) {
       let (dxdt, dydt, dkxdt, dkydt) = odes(y[2], y[3]);
       
       dy[0] = dxdt;
       dy[1] = dydt;
       dy[2] = dkxdt;
       dy[3] = dkydt;
   }
}

#[cfg(test)]
mod test_ode_solver {
   use std::{fs::File, io::Write, path::Path};

   use crate::{State, WaveRayPath};
   use ode_solvers::{*, rk4::*};

   #[test]
   fn test_solver() {

      let system = WaveRayPath{ g: 9.8 };
      let y0 = State::new(0.0, 0.0, 1.0, 0.0); // (x, y, kx, ky)

      let t0 = 0.0;
      let tf = 2.0;
      let step_size = 1.0;

      let mut stepper = Rk4::new(system, t0, y0, tf, step_size);
      let res = stepper.integrate();

          // Handle result
      match res {
         Ok(stats) => {
            dbg!(stats);

            let y = stepper.y_out();
            
            let mut file = File::create("test.txt").expect("could not open file");
            writeln!(&mut file, "t x y kx ky").expect("could not write to file");
            for (i, x) in stepper.x_out().iter().enumerate() {
               write!(&mut file, "{x} ").expect("could not write to file");
               for elem in y[i].iter() {
                  write!(&mut file, "{elem} ").expect("could not write to file");
               }
               writeln!(&mut file, " ").expect("could not write to file");
            }
            
         },
         Err(_) => println!("An error occured."),
      }
   }

}